import numpy as np
import matplotlib.pyplot as plt



def detectorNoiseP_1_1(qImage):
    return np.random.poisson(qImage)


def detectorNoiseN_1_1(qImage:np.ndarray):
    # The noise generated by the function we must use has mean 0 and variance 1
    # The noise intensity must distribute with mean equals to the intensity and as variance the sqrt of the value
    # Working in the following statement
    # Let X∼N(μ,σ^2), let Y=a*X+b => Y∼N(a*μ + b,a^2*σ^2)
    # We know that the transformation that must be done on each pixel is:
    # let σ_0 be the variance of the original distribution
    # let σ be the variance we want
    # let μ_0 be the mean of the original distribution
    # let μ be the mean we want
    # a*I + b, where a = σ/σ_0 and b = μ - (σ/σ_0)*μ_0
    # But μ_0 = 0 and σ_0 = 1 soo a = σ and b = μ
    # The mean we want is the actual intensity of the pixel (I) and the variance is sqrt of that intensity
    # So what we need to do is 
    # sqrt(I)*N + I
    noise = np.random.randn(qImage.shape[0], qImage.shape[1])
    print(noise.mean())
    print(noise.std())
    return np.sqrt(qImage)*noise + qImage


